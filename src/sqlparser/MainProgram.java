/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sqlparser;

import java.util.ArrayList;
import java.util.Stack;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * @author Satrio Adityo
 * date Nov 11, 2014
 */
public class MainProgram extends javax.swing.JFrame {

    /**
     * Creates new form MainProgram
     */
        
    public MainProgram() {
        initComponents();
        txtSql.setEnabled(false);
        txtInputToken.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSql = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOutput = new javax.swing.JTable();
        btnParse = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtInputToken = new javax.swing.JTextField();
        btnToken = new javax.swing.JButton();
        btnString = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        txtSql.setColumns(20);
        txtSql.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txtSql.setLineWrap(true);
        txtSql.setRows(5);
        txtSql.setToolTipText("Input by SQL query");
        jScrollPane1.setViewportView(txtSql);

        tblOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "String", "Besaran Lexic", "Token Lexic"
            }
        ));
        jScrollPane2.setViewportView(tblOutput);

        btnParse.setText("Parse");
        btnParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParseActionPerformed(evt);
            }
        });

        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MINI SQL PARSER");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtInputToken.setToolTipText("Input By Token");

        btnToken.setText("Token");
        btnToken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTokenActionPerformed(evt);
            }
        });

        btnString.setText("String");
        btnString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStringActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtInputToken)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnString)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnToken)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnParse, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtInputToken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(btnParse)
                    .addComponent(btnToken)
                    .addComponent(btnString))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
    int symbol;
    int[] aSymbol;
    
    private void btnParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParseActionPerformed
        
        //reset table
        int rows = tblOutput.getRowCount();
        for(int i=0;i<rows;i++){
            ((DefaultTableModel)tblOutput.getModel()).setRowCount(0);
        }
        Object[] tbl = new Object[7];
        for(int i=0;i<rows;i++){
            ((DefaultTableModel)tblOutput.getModel()).addRow(tbl);
        }
        //end of reset
        
        if(!"".equals(txtSql.getText()) && !"".equals(txtInputToken.getText())){
            JOptionPane.showMessageDialog(rootPane, "Isi salah satu field saja!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else if(!"".equals(txtSql.getText()) && "".equals(txtInputToken.getText())){
            //input user
            String inputSql = txtSql.getText().toLowerCase();
            inputSql += "#"; // ini untuk sentinel atau tanda berhenti mengiterasi input user

            //variable bantu untuk manipulasi string inputSql
            String tempString = "";
            ArrayList<String> tempListWordSQL = new ArrayList<>();
            int cc = 0;

            //manipulate inputSql / input user, penelusuran per karakter, kemudian dipisahkan per kata.
            while(inputSql.charAt(cc)!='#'){
                if (inputSql.charAt(cc) != ' ' && inputSql.charAt(cc)!= '*' && 
                    inputSql.charAt(cc) != '.' && inputSql.charAt(cc)!= ',' &&
                    inputSql.charAt(cc) != '=' && inputSql.charAt(cc)!= '(' && 
                    inputSql.charAt(cc) != ')' && inputSql.charAt(cc)!= ';' && 
                    inputSql.charAt(cc)!= '\"' && inputSql.charAt(cc)!= '<' && 
                    inputSql.charAt(cc)!= '>') {
                        tempString += inputSql.charAt(cc);
                }
                else if(inputSql.charAt(cc) == ' '){
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                else if(inputSql.charAt(cc) == '*'){
                    tempListWordSQL.add(tempString);
                    tempString = "*";
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                else if(inputSql.charAt(cc) == '.'){
                    tempListWordSQL.add(tempString);
                    tempString = ".";
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                else if(inputSql.charAt(cc) == ','){
                    tempListWordSQL.add(tempString);
                    tempString = ",";
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                else if(inputSql.charAt(cc) == '='){
                    if(inputSql.charAt(cc+1)=='>' || inputSql.charAt(cc+1)=='<' ){
                        JOptionPane.showMessageDialog(txtSql, "Input yang Anda masukkan salah!", "Terjadi Kesalahan!", JOptionPane.ERROR_MESSAGE);
                        break;
                    }else{
                        tempListWordSQL.add(tempString);
                        tempString = "=";
                        tempListWordSQL.add(tempString);
                        tempString = "";
                    }
                }
                else if(inputSql.charAt(cc) == '('){
                    tempListWordSQL.add(tempString);
                    tempString = "(";
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                else if(inputSql.charAt(cc) == ')'){
                    tempListWordSQL.add(tempString);
                    tempString = ")";
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                else if(inputSql.charAt(cc) == ';'){
                    tempListWordSQL.add(tempString);
                    tempString = ";";
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                else if(inputSql.charAt(cc) == '\"'){
                    tempListWordSQL.add(tempString);
                    tempString = "";
                    //cari tanda " kedua
                    int cc2 = 0;
                    boolean search = true;
                    int index2 = cc+1;
                    while (search && inputSql.charAt(index2)!='#'){
                        if (inputSql.charAt(index2)=='\"'){
                            cc2 = index2;
                            search = false;
                        }
                        index2++;
                    }
                    if(search){
                        JOptionPane.showMessageDialog(txtSql, "Input Anda kurang tanda \"", "Terjadi Kesalahan!", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    for (int i = cc; i<=cc2;i++){
                        tempString += inputSql.charAt(i);
                    }
                    cc = cc2;
                }
                else if(inputSql.charAt(cc) == '<'){
                    tempListWordSQL.add(tempString);
                    tempString = "<";
                    if(inputSql.charAt(cc+1)=='='){
                        tempString+="=";
                        cc++;
                    }
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                else if(inputSql.charAt(cc) == '>'){
                    tempListWordSQL.add(tempString);
                    tempString = ">";
                    if(inputSql.charAt(cc+1)=='='){
                        tempString+="=";
                        cc++;
                    }
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                else{
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
    //            System.out.println(cc + " " + inputSql.charAt(cc));

                if(inputSql.charAt(cc+1) == '#'){
                    tempListWordSQL.add(tempString);
                    tempString = "";
                }
                cc++;
            }

            //melakukan minimasi arraylist
            ArrayList<String> listWordSQL = new ArrayList<>();
            //menelusuri list tempListWordSQL, mencari list yg tidak kosong
            for (String s : tempListWordSQL){
                if (!"".equals(s)){
                    listWordSQL.add(s);
                }
            } 

    //        for (String s : listWordSQL){
    //            System.out.println(s);
    //        }

            ArrayList<Dict> listDict = new ArrayList<>();
            int rowTab = 0;
            Dict temp;
            //proses pencocokan tiap string input inputSql menggunakan state
            for(String s : listWordSQL){
                //kalo select
                if (isFASelect(s)){
                    temp = new Dict(s, "KEYWORD", 1);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFABintang(s)){
                    temp = new Dict(s, "KEYWORD", 2);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAFrom(s)){
                    temp = new Dict(s, "KEYWORD", 3);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAWhere(s)){
                    temp = new Dict(s, "KEYWORD", 5);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFATitik(s)){
                    temp = new Dict(s, "KEYWORD", 6);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFASamadengan(s)){
                    temp = new Dict(s, "KEYWORD", 7);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFATitikkoma(s)){
                    temp = new Dict(s, "KEYWORD", 9);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFABukakurung(s)){
                    temp = new Dict(s, "KEYWORD", 11);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFATutupkurung(s)){
                    temp = new Dict(s, "KEYWORD", 12);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAJoin(s)){
                    temp = new Dict(s, "KEYWORD", 23);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAIN(s)){
                    temp = new Dict(s, "KEYWORD", 13);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAAND(s)){
                    temp = new Dict(s, "KEYWORD", 14);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAOR(s)){
                    temp = new Dict(s, "KEYWORD", 15);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFANOT(s)){
                    temp = new Dict(s, "KEYWORD", 16);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFABesardari(s)){
                    temp = new Dict(s, "KEYWORD", 17);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFABesardarisamadengan(s)){
                    temp = new Dict(s, "KEYWORD", 18);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAKurangdari(s)){
                    temp = new Dict(s, "KEYWORD", 19);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAKurangdarisamadengan(s)){
                    temp = new Dict(s, "KEYWORD", 20);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFALike(s)){
                    temp = new Dict(s, "KEYWORD", 21);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAUnion(s)){
                    temp = new Dict(s, "KEYWORD", 22);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }

                else if(isFAKoma(s)){
                    temp = new Dict(s, "KEYWORD", 24);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAON(s)){
                    temp = new Dict(s, "KEYWORD", 25);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAString(s)){
                    temp = new Dict(s, "CONSTANT_STRING", 8);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFANumber(s)){
                    temp = new Dict(s, "CONSTANT_NUMBER", 10);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else if(isFAVariable(s)){
                    temp = new Dict(s, "VARIABLE", 4);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
                else{
                    temp = new Dict(s, "UNDEFINED", 99);
                    listDict.add(temp);
                    outputTabel(temp, rowTab);
                    rowTab++;
                }
            }
            Dict sentinel = new Dict(null,null,999);
            listDict.add(sentinel);

            // mengiterasi setiap token lexic
            Stack st = new Stack();
            
            aSymbol = new int[listDict.size()];

            int i = 0 , j = 0;

            for(Dict dict : listDict){
                aSymbol[i++] = dict.getTokenLexic();
    //            System.out.println(aSymbol[i++]);
            }
            symbol = aSymbol[0];
            boolean stop = false;
            int state = 0; st.push("#"); state = 1; st.push("S");
            System.out.println("current symbol = "+symbol+" , stack = "+st);
            while(st.peek().toString()!="#" && !stop){
                switch(st.peek().toString()){
                    case "S" :
                        if(symbol==1){
                            if(st.peek().toString()=="S"){
                                st.pop();
                                st.push("i"); st.push("Z"); st.push("V"); st.push("c"); st.push("V"); st.push("a");
                                System.out.println("pop S , push aVcVZi, stack = "+st);
                            }
                        }
                        else{
                            stop = true;
                        }
                    break;

                    case "V" :
                        if(symbol == 2){
                            if(st.peek().toString()=="V"){
                                st.pop();
                                st.push("b");
                                System.out.println(st);
                                System.out.println("pop V, push b");
                            }
                        }
                        else if(symbol == 4){
                            if(aSymbol[j+1] == 6){
                                if(st.peek().toString()=="V"){
                                    st.pop();
                                    st.push("V"); st.push("f"); st.push("d");
                                    System.out.println("pop V, push dfV, stack = "+st);
                                }
                            }
                            else if(aSymbol[j+1] == 24){
                                if(st.peek().toString()=="V"){
                                    st.pop();
                                    st.push("V"); st.push("x"); st.push("d");
                                    System.out.println("pop V, push dxV, stack = "+st);
                                }
                            }
                            else{
                                if(st.peek().toString()=="V"){
                                    st.pop(); 
                                    st.push("d");
                                    System.out.println(st);
                                    System.out.println("pop V, push d");
                                }
                            }
                        }
                        else{
                            stop = true;
                        }
                    break;

                    case "Z" :
                        if(symbol==23){
                            if(st.peek().toString()=="Z"){
                                st.pop();
                                st.push("l"); st.push("V"); st.push("g"); st.push("V"); st.push("k");
                                st.push("y"); st.push("V"); st.push("w");
                                System.out.println(st);
                            }
                        }
                        else if(symbol == 5){
                            if(st.peek().toString()=="Z"){
                                st.pop();
                                if( (aSymbol[j+1] == 4 && aSymbol[j+2] == 13) || (aSymbol[j+1] == 4 && aSymbol[j+4] == 13) ){
                                    st.push("S"); st.push("k"); st.push("m"); st.push("V"); st.push("e");
                                    System.out.println(st);
                                    System.out.println("pop Z, push eVmkS");
                                }
                                else if((aSymbol[j+1] == 4 && (aSymbol[j+2] == 7 || aSymbol[j+2] == 17 || aSymbol[j+2] == 18 || aSymbol[j+2] == 19 || aSymbol[j+2] == 20)) 
                                    || (aSymbol[j+1] == 4 && (aSymbol[j+4] == 7 || aSymbol[j+4] == 17 || aSymbol[j+4] == 18 || aSymbol[j+4] == 19 || aSymbol[j+4] == 20))){

                                       st.push("A"); st.push("C"); st.push("O"); st.push("V"); st.push("e");
                                       System.out.println(st);
                                       System.out.println("pop Z, push eVOCA");
                                }
                                
                                else{
                                   stop = true;
                                }
                            }
                        }
                        else{
                            if(st.peek().toString()=="Z"){
                                st.pop();
                                System.out.println(st);
                                System.out.println("pop Z");
                            }
                        }
                    break;

                    case "O" :
                        if(symbol==7){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("g");
                                System.out.println(st);
                                System.out.println("pop O, push g");
                            }
                        }
                        else if(symbol==17){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("q");
                                System.out.println(st);
                                System.out.println("pop O, push q");
                            }
                        }
                        else if(symbol==18){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("r");
                                System.out.println(st);
                                System.out.println("pop O, push r");
                            }
                        }
                        else if(symbol==19){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("s");
                                System.out.println(st);
                                System.out.println("pop O, push s");
                            }
                        }
                        else if(symbol==20){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("t");
                                System.out.println(st);
                                System.out.println("pop O, push t");
                            }
                        }
                    break;

                    case "C" :
                        if(symbol==8){
                            if(st.peek().toString()=="C"){
                                st.pop();
                                st.push("h");
                                System.out.println(st);
                                System.out.println("pop C, push h");
                            }
                        }
                        else if(symbol==10){
                            if(st.peek().toString()=="C"){
                                st.pop();
                                st.push("j");
                                System.out.println(st);
                                System.out.println("pop C, push j");
                            }
                        }
                        else if(symbol==4){
                            if(st.peek().toString()=="C"){
                                st.pop();
                                st.push("V");
                                System.out.println(st);
                                System.out.println("pop C, push V");
                            }
                        }
                        else{
                            if(st.peek().toString()=="C"){
                                st.pop();
                                st.push("S"); st.push("k");
                                System.out.println(st);
                                System.out.println("pop C, push kS");
                            }
                        }
                    break;

                    case "A" :
                        if(symbol==14){
                            if(st.peek().toString()=="A"){
                                st.pop();
                                st.push("C"); st.push("O"); st.push("V"); st.push("n");
                                System.out.println(st);
                                System.out.println("pop A, push nVOC");
                            }
                        }
                        else if(symbol==15){
                            if(st.peek().toString()=="A"){
                                st.pop();
                                st.push("C"); st.push("O"); st.push("V"); st.push("o");
                                System.out.println(st);
                                System.out.println("pop A, push oVOC");
                            }
                        }
                        else if(symbol==12){
                            if(st.peek().toString()=="A"){
                                st.pop();
                                st.push("l");
                                System.out.println(st);
                                System.out.println("pop A, push l");
                            }
                        }
                        else{
                            if(st.peek().toString()=="A"){
                                st.pop();
                                System.out.println(st);
                                System.out.println("pop A");
                            }
                        }
                    break;

                    case "a" :
                        if(symbol==1){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop a , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 1, tidak bisa pop a, query salah, stack tidak kosong");
                        }
                    break;
                    case "b" :
                        if(symbol==2){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop b , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 2, tidak bisa pop b, query salah, stack tidak kosong");
                        }
                    break;
                    case "c" :
                        if(symbol==3){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop c , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 3, tidak bisa pop c, query salah, stack tidak kosong");
                        }
                    break;
                    case "d" :
                        if(symbol==4){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop d , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 4, tidak bisa pop d, query salah, stack tidak kosong");
                        }
                    break;
                    case "e" :
                        if(symbol==5){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop e , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 5, tidak bisa pop e, query salah, stack tidak kosong");
                        }
                    break;
                    case "f" :
                        if(symbol==6){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop f , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 6, tidak bisa pop f, query salah, stack tidak kosong");
                        }
                    break;
                    case "g" :
                        if(symbol==7){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop g , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 7, tidak bisa pop g, query salah, stack tidak kosong");
                        }
                    break;
                    case "h" :
                        if(symbol==8){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop h , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 8, tidak bisa pop h, query salah, stack tidak kosong");
                        }
                    break;
                    case "i" :
                        if(symbol==9){
                            st.pop();
//                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop i , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 9 atau 12, tidak bisa pop i, query salah, stack tidak kosong");
                        }
                    break;
                    case "j" :
                        if(symbol==10){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop j , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 10, tidak bisa pop j, query salah, stack tidak kosong");
                        }
                    break;
                    case "k" :
                        if(symbol==11){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop k , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 11, tidak bisa pop k, query salah, stack tidak kosong");
                        }
                    break;
                    case "l" :
                        if(symbol==12){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop l , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 12, tidak bisa pop l, query salah, stack tidak kosong");
                        }
                    break;
                    case "m" :
                        if(symbol==13){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop m , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 13, tidak bisa pop m, query salah, stack tidak kosong");
                        }
                    break;
                    case "n" :
                        if(symbol==14){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop n , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 14, tidak bisa pop n, query salah, stack tidak kosong");
                        }
                    break;
                    case "o" :
                        if(symbol==15){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop o , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 15, tidak bisa pop o, query salah, stack tidak kosong");
                        }
                    break;
                    case "p" :
                        if(symbol==16){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop p , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 16, tidak bisa pop p, query salah, stack tidak kosong");
                        }
                    break;
                    case "q" :
                        if(symbol==17){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop q , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 17, tidak bisa pop q, query salah, stack tidak kosong");
                        }
                    break;
                    case "r" :
                        if(symbol==18){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop r , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 18, tidak bisa pop r, query salah, stack tidak kosong");
                        }
                    break;
                    case "s" :
                        if(symbol==19){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop s , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 19, tidak bisa pop s, query salah, stack tidak kosong");
                        }
                    break;
                    case "t" :
                        if(symbol==20){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop t , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 20, tidak bisa pop t, query salah, stack tidak kosong");
                        }
                    break;
                    case "u" :
                        if(symbol==21){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop u , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 21, tidak bisa pop u, query salah, stack tidak kosong");
                        }
                    break;
                    case "v" :
                        if(symbol==22){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop v , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 22, tidak bisa pop v, query salah, stack tidak kosong");
                        }
                    break;
                    case "w" :
                        if(symbol==23){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop w , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 23, tidak bisa pop w, query salah, stack tidak kosong");
                        }
                    break;
                    case "x" :
                        if(symbol==24){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop x , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 24, tidak bisa pop x, query salah, stack tidak kosong");
                        }
                    break;
                    case "y" :
                        if(symbol==25){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop y , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 25, tidak bisa pop y, query salah, stack tidak kosong");
                        }
                    break;
                    case "z" :
                        if(symbol==26){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop z , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 26, tidak bisa pop z, query salah, stack tidak kosong");
                        }
                    break;
                }
            }
            if(st.peek().toString()=="#"){
                st.pop();
                System.out.println(st);
            }
            
            if(st.empty()){
                JOptionPane.showMessageDialog(rootPane, "SQL query VALID", "Validation", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "SQL query NOT VALID", "Validation", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        else if("".equals(txtSql.getText()) && !"".equals(txtInputToken.getText())){
            String inputToken = txtInputToken.getText();
            String[] listTempInputToken;
            ArrayList<Integer> listInputToken = new ArrayList<>();
            listTempInputToken = inputToken.split(" ");
            for (int i = 0; i<listTempInputToken.length;i++){
                if(!"".equals(listTempInputToken[i])){
                    listInputToken.add(Integer.parseInt(listTempInputToken[i]));
                }
            }
            aSymbol = new int[listInputToken.size()];
            int i=0;
            for(Integer lit : listInputToken){
                aSymbol[i++] = lit;
                System.out.println(aSymbol[i-1]);
            }
            
            symbol = aSymbol[0];
            boolean stop = false;
            int j = 0;
            Stack st = new Stack();
            int state = 0; st.push("#"); state = 1; st.push("S");
            System.out.println("current symbol = "+symbol+" , stack = "+st);
            while(st.peek().toString()!="#" && !stop){
                switch(st.peek().toString()){
                    case "S" :
                        if(symbol==1){
                            if(st.peek().toString()=="S"){
                                st.pop();
                                st.push("i"); st.push("Z"); st.push("V"); st.push("c"); st.push("V"); st.push("a");
                                System.out.println("pop S , push aVcVZi, stack = "+st);
                            }
                        }
                        else{
                            stop = true;
                        }
                    break;

                    case "V" :
                        if(symbol == 2){
                            if(st.peek().toString()=="V"){
                                st.pop();
                                st.push("b");
                                System.out.println(st);
                                System.out.println("pop V, push b");
                            }
                        }
                        else if(symbol == 4){
                            if(aSymbol[j+1] == 6){
                                if(st.peek().toString()=="V"){
                                    st.pop();
                                    st.push("V"); st.push("f"); st.push("d");
                                    System.out.println("pop V, push dfV, stack = "+st);
                                }
                            }
                            else if(aSymbol[j+1] == 24){
                                if(st.peek().toString()=="V"){
                                    st.pop();
                                    st.push("V"); st.push("x"); st.push("d");
                                    System.out.println("pop V, push dxV, stack = "+st);
                                }
                            }
                            else{
                                if(st.peek().toString()=="V"){
                                    st.pop(); 
                                    st.push("d");
                                    System.out.println(st);
                                    System.out.println("pop V, push d");
                                }
                            }
                        }
                        else{
                            stop = true;
                        }
                    break;

                    case "Z" :
                        if(symbol==23){
                            if(st.peek().toString()=="Z"){
                                st.pop();
                                st.push("l"); st.push("V"); st.push("g"); st.push("V"); st.push("k");
                                st.push("y"); st.push("V"); st.push("w");
                                System.out.println(st);
                            }
                        }
                        else if(symbol == 5){
                            if(st.peek().toString()=="Z"){
                                st.pop();
                                if( (aSymbol[j+1] == 4 && aSymbol[j+2] == 13) || (aSymbol[j+1] == 4 && aSymbol[j+4] == 13) ){
                                    st.push("S"); st.push("k"); st.push("m"); st.push("V"); st.push("e");
                                    System.out.println(st);
                                    System.out.println("pop Z, push eVmkS");
                                }
                                else if((aSymbol[j+1] == 4 && (aSymbol[j+2] == 7 || aSymbol[j+2] == 17 || aSymbol[j+2] == 18 || aSymbol[j+2] == 19 || aSymbol[j+2] == 20)) 
                                    || (aSymbol[j+1] == 4 && (aSymbol[j+4] == 7 || aSymbol[j+4] == 17 || aSymbol[j+4] == 18 || aSymbol[j+4] == 19 || aSymbol[j+4] == 20))){

                                       st.push("A"); st.push("C"); st.push("O"); st.push("V"); st.push("e");
                                       System.out.println(st);
                                       System.out.println("pop Z, push eVOCA");
                                }
                                
                                else{
                                   stop = true;
                                }
                            }
                        }
                        else{
                            if(st.peek().toString()=="Z"){
                                st.pop();
                                System.out.println(st);
                                System.out.println("pop Z");
                            }
                        }
                    break;

                    case "O" :
                        if(symbol==7){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("g");
                                System.out.println(st);
                                System.out.println("pop O, push g");
                            }
                        }
                        else if(symbol==17){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("q");
                                System.out.println(st);
                                System.out.println("pop O, push q");
                            }
                        }
                        else if(symbol==18){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("r");
                                System.out.println(st);
                                System.out.println("pop O, push r");
                            }
                        }
                        else if(symbol==19){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("s");
                                System.out.println(st);
                                System.out.println("pop O, push s");
                            }
                        }
                        else if(symbol==20){
                            if(st.peek().toString()=="O"){
                                st.pop();
                                st.push("t");
                                System.out.println(st);
                                System.out.println("pop O, push t");
                            }
                        }
                    break;

                    case "C" :
                        if(symbol==8){
                            if(st.peek().toString()=="C"){
                                st.pop();
                                st.push("h");
                                System.out.println(st);
                                System.out.println("pop C, push h");
                            }
                        }
                        else if(symbol==10){
                            if(st.peek().toString()=="C"){
                                st.pop();
                                st.push("j");
                                System.out.println(st);
                                System.out.println("pop C, push j");
                            }
                        }
                        else if(symbol==4){
                            if(st.peek().toString()=="C"){
                                st.pop();
                                st.push("V");
                                System.out.println(st);
                                System.out.println("pop C, push V");
                            }
                        }
                        else{
                            if(st.peek().toString()=="C"){
                                st.pop();
                                st.push("S"); st.push("k");
                                System.out.println(st);
                                System.out.println("pop C, push kS");
                            }
                        }
                    break;

                    case "A" :
                        if(symbol==14){
                            if(st.peek().toString()=="A"){
                                st.pop();
                                st.push("C"); st.push("O"); st.push("V"); st.push("n");
                                System.out.println(st);
                                System.out.println("pop A, push nVOC");
                            }
                        }
                        else if(symbol==15){
                            if(st.peek().toString()=="A"){
                                st.pop();
                                st.push("C"); st.push("O"); st.push("V"); st.push("o");
                                System.out.println(st);
                                System.out.println("pop A, push oVOC");
                            }
                        }
                        else if(symbol==12){
                            if(st.peek().toString()=="A"){
                                st.pop();
                                st.push("l");
                                System.out.println(st);
                                System.out.println("pop A, push l");
                            }
                        }
                        else{
                            if(st.peek().toString()=="A"){
                                st.pop();
                                System.out.println(st);
                                System.out.println("pop A");
                            }
                        }
                    break;

                    case "a" :
                        if(symbol==1){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop a , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 1, tidak bisa pop a, query salah, stack tidak kosong");
                        }
                    break;
                    case "b" :
                        if(symbol==2){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop b , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 2, tidak bisa pop b, query salah, stack tidak kosong");
                        }
                    break;
                    case "c" :
                        if(symbol==3){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop c , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 3, tidak bisa pop c, query salah, stack tidak kosong");
                        }
                    break;
                    case "d" :
                        if(symbol==4){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop d , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 4, tidak bisa pop d, query salah, stack tidak kosong");
                        }
                    break;
                    case "e" :
                        if(symbol==5){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop e , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 5, tidak bisa pop e, query salah, stack tidak kosong");
                        }
                    break;
                    case "f" :
                        if(symbol==6){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop f , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 6, tidak bisa pop f, query salah, stack tidak kosong");
                        }
                    break;
                    case "g" :
                        if(symbol==7){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop g , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 7, tidak bisa pop g, query salah, stack tidak kosong");
                        }
                    break;
                    case "h" :
                        if(symbol==8){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop h , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 8, tidak bisa pop h, query salah, stack tidak kosong");
                        }
                    break;
                    case "i" :
                        if(symbol==9){
                            st.pop();
//                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop i , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 9 atau 12, tidak bisa pop i, query salah, stack tidak kosong");
                        }
                    break;
                    case "j" :
                        if(symbol==10){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop j , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 10, tidak bisa pop j, query salah, stack tidak kosong");
                        }
                    break;
                    case "k" :
                        if(symbol==11){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop k , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 11, tidak bisa pop k, query salah, stack tidak kosong");
                        }
                    break;
                    case "l" :
                        if(symbol==12){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop l , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 12, tidak bisa pop l, query salah, stack tidak kosong");
                        }
                    break;
                    case "m" :
                        if(symbol==13){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop m , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 13, tidak bisa pop m, query salah, stack tidak kosong");
                        }
                    break;
                    case "n" :
                        if(symbol==14){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop n , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 14, tidak bisa pop n, query salah, stack tidak kosong");
                        }
                    break;
                    case "o" :
                        if(symbol==15){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop o , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 15, tidak bisa pop o, query salah, stack tidak kosong");
                        }
                    break;
                    case "p" :
                        if(symbol==16){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop p , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 16, tidak bisa pop p, query salah, stack tidak kosong");
                        }
                    break;
                    case "q" :
                        if(symbol==17){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop q , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 17, tidak bisa pop q, query salah, stack tidak kosong");
                        }
                    break;
                    case "r" :
                        if(symbol==18){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop r , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 18, tidak bisa pop r, query salah, stack tidak kosong");
                        }
                    break;
                    case "s" :
                        if(symbol==19){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop s , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 19, tidak bisa pop s, query salah, stack tidak kosong");
                        }
                    break;
                    case "t" :
                        if(symbol==20){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop t , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 20, tidak bisa pop t, query salah, stack tidak kosong");
                        }
                    break;
                    case "u" :
                        if(symbol==21){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop u , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 21, tidak bisa pop u, query salah, stack tidak kosong");
                        }
                    break;
                    case "v" :
                        if(symbol==22){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop v , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 22, tidak bisa pop v, query salah, stack tidak kosong");
                        }
                    break;
                    case "w" :
                        if(symbol==23){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop w , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 23, tidak bisa pop w, query salah, stack tidak kosong");
                        }
                    break;
                    case "x" :
                        if(symbol==24){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop x , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 24, tidak bisa pop x, query salah, stack tidak kosong");
                        }
                    break;
                    case "y" :
                        if(symbol==25){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop y , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 25, tidak bisa pop y, query salah, stack tidak kosong");
                        }
                    break;
                    case "z" :
                        if(symbol==26){
                            st.pop();
                            j=j+1;
                            symbol = aSymbol[j];
                            System.out.println(st);
                            System.out.println("pop z , current symbol =  "+symbol);
                        }
                        else {
                            stop = true;
                            System.out.println("current symbol bukan 26, tidak bisa pop z, query salah, stack tidak kosong");
                        }
                    break;
                }
            }
            if(st.peek().toString()=="#"){
                st.pop();
                System.out.println(st);
            }
            
            if(st.empty()){
                JOptionPane.showMessageDialog(rootPane, "TOKEN SQL query VALID", "Validation", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "TOKEN SQL query NOT VALID", "Validation", JOptionPane.ERROR_MESSAGE);
            }
            
            
        }
        
        
        
        
    }//GEN-LAST:event_btnParseActionPerformed

    //procedure untuk menampilkan data ke tabel
    public void outputTabel(Dict d, int i){
        tblOutput.setValueAt(d.getKata(), i, 0);
        tblOutput.setValueAt(d.getBesaranLexic(), i, 1);
        tblOutput.setValueAt(d.getTokenLexic(), i, 2);
    }
    
    //fungsi untuk mengecek apakah string itu select
    public boolean isFASelect(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='s'){
                        state = 1;
                    }
                break;
                case 1:
                    if(s.charAt(i)=='e'){
                        state = 2;
                    }
                break;
                case 2:
                    if(s.charAt(i)=='l'){
                        state = 3;
                    }
                break;
                case 3:
                if(s.charAt(i)=='e'){
                    state = 4;
                }
                case 4:
                    if(s.charAt(i)=='c'){
                        state = 5;
                    }
                break;
                case 5:
                    if(s.charAt(i)=='t'){
                        state = 6;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 6){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu *
    public boolean isFABintang(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='*'){
                        state = 1;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu from
    public boolean isFAFrom(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='f'){
                        state = 1;
                    }
                break;
                case 1:
                if (s.charAt(i)=='r'){
                    state = 2;
                }
                break;
                case 2:
                if (s.charAt(i)=='o'){
                    state = 3;
                }
                break;
                case 3:
                    if (s.charAt(i)=='m'){
                        state = 4;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 4){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu where
    public boolean isFAWhere(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='w'){
                        state = 1;
                    }
                break;
                case 1:
                if (s.charAt(i)=='h'){
                    state = 2;
                }
                break;
                case 2:
                if (s.charAt(i)=='e'){
                    state = 3;
                }
                break;
                case 3:
                    if (s.charAt(i)=='r'){
                        state = 4;
                    }
                break;
                case 4:
                    if (s.charAt(i)=='e'){
                        state = 5;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 5){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu .
    public boolean isFATitik(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='.'){
                        state = 1;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu =
    public boolean isFASamadengan(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='='){
                        state = 1;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu ;
    public boolean isFATitikkoma(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)==';'){
                        state = 1;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu (
    public boolean isFABukakurung(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='('){
                        state = 1;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu )
    public boolean isFATutupkurung(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)==')'){
                        state = 1;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu in
    public boolean isFAIN(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='i'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='n'){
                        state = 2;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 2){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu and
    public boolean isFAAND(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='a'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='n'){
                        state = 2;
                    }
                break;
                case 2:
                    if (s.charAt(i)=='d'){
                        state = 3;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 3){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu or
    public boolean isFAOR(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='o'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='r'){
                        state = 2;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 2){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu not
    public boolean isFANOT(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='n'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='o'){
                        state = 2;
                    }
                break;
                case 2:
                    if (s.charAt(i)=='t'){
                        state = 3;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 3){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu >
    public boolean isFABesardari(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='>'){
                        state = 1;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu <
    public boolean isFAKurangdari(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='<'){
                        state = 1;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu <=
    public boolean isFAKurangdarisamadengan(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='<'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='='){
                        state = 2;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 2){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu >=
    public boolean isFABesardarisamadengan(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='>'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='='){
                        state = 2;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 2){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu like
    public boolean isFALike(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='l'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='i'){
                        state = 2;
                    }
                break;
                case 2:
                    if (s.charAt(i)=='k'){
                        state = 3;
                    }
                break;
                case 3:
                    if (s.charAt(i)=='e'){
                        state = 4;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 4){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu join
    public boolean isFAJoin(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='j'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='o'){
                        state = 2;
                    }
                break;
                case 2:
                    if (s.charAt(i)=='i'){
                        state = 3;
                    }
                break;
                case 3:
                    if (s.charAt(i)=='n'){
                        state = 4;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 4){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu union
    public boolean isFAUnion(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='u'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='n'){
                        state = 2;
                    }
                break;
                case 2:
                    if (s.charAt(i)=='i'){
                        state = 3;
                    }
                break;
                case 3:
                    if (s.charAt(i)=='o'){
                        state = 4;
                    }
                break;
                case 4:
                    if (s.charAt(i)=='n'){
                        state = 5;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 5){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu string
    public boolean isFAString(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='\"'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)!='\"'){
                        state = 2;
                    }
                break;
                case 2:
                    if (s.charAt(i)=='\"'){
                        state = 3;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 3){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu string
    public boolean isFANumber(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='0' || s.charAt(i)=='1' || s.charAt(i)=='2' || s.charAt(i)=='3' || s.charAt(i)=='4'
                        || s.charAt(i)=='5' || s.charAt(i)=='6' || s.charAt(i)=='7' || s.charAt(i)=='8' || s.charAt(i)=='9'){
                        state = 1;
                    }
                    else{
                        state = 2;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='0' || s.charAt(i)=='1' || s.charAt(i)=='2' || s.charAt(i)=='3' || s.charAt(i)=='4'
                        || s.charAt(i)=='5' || s.charAt(i)=='6' || s.charAt(i)=='7' || s.charAt(i)=='8' || s.charAt(i)=='9' || s.charAt(i)=='9'){
                        state = 1;
                    }
                    else{
                        state = 2;
                    }
                break;
                default:
                    state = 2;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu string
    public boolean isFAVariable(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)!='0' && s.charAt(i)!='1' && s.charAt(i)!='2' && 
                        s.charAt(i)!='3' && s.charAt(i)!='4' && s.charAt(i)!='5' && 
                        s.charAt(i)!='6' && s.charAt(i)!='7' && s.charAt(i)!='8' && 
                        s.charAt(i)!='9' && s.charAt(i)!='!' && s.charAt(i)!='@' &&
                        s.charAt(i)!='#' && s.charAt(i)!='$' && s.charAt(i)!='%' &&
                        s.charAt(i)!='^' && s.charAt(i)!='&' && s.charAt(i)!='*' &&
                        s.charAt(i)!='(' && s.charAt(i)!=')' && s.charAt(i)!='-' &&
                        s.charAt(i)!='_' && s.charAt(i)!='+' && s.charAt(i)!='=' )
                    {
                        state = 1;
                    }
                    else{
                        state = 3;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='0' || s.charAt(i)=='1' || s.charAt(i)=='2' || 
                        s.charAt(i)=='3' || s.charAt(i)=='4' || s.charAt(i)=='5' || 
                        s.charAt(i)=='6' || s.charAt(i)=='7' || s.charAt(i)=='8' || 
                        s.charAt(i)=='9'){
                        state = 1;
                    }
                    else{
                        state = 1;
                    }
                break;
                default:
                    state = 3;
            }
        }
        if(state == 0 || state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu .
    public boolean isFAKoma(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)==','){
                        state = 1;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 1){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    //fungsi untuk mengecek apakah string itu on
    public boolean isFAON(String s){
        int state = 0;
        boolean status = false;
        for (int i = 0; i<s.length(); i++){
            switch (state) {
                case 0:
                    if (s.charAt(i)=='o'){
                        state = 1;
                    }
                break;
                case 1:
                    if (s.charAt(i)=='n'){
                        state = 2;
                    }
                break;
                default:
                    state = 0;
            }
        }
        if(state == 2){
            status = true;
        }
        else{
            status = false;
        }
        return status;
    }
    
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        txtSql.setText(null);
        int rows = tblOutput.getRowCount();
        for(int i=0;i<rows;i++){
            ((DefaultTableModel)tblOutput.getModel()).setRowCount(0);
        }
        Object[] tbl = new Object[7];
        for(int i=0;i<rows;i++){
            ((DefaultTableModel)tblOutput.getModel()).addRow(tbl);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnTokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTokenActionPerformed
        // TODO add your handling code here:
        txtSql.setText("");
        txtInputToken.setEnabled(true);
        txtSql.setEnabled(false);
    }//GEN-LAST:event_btnTokenActionPerformed

    private void btnStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStringActionPerformed
        // TODO add your handling code here:
        txtInputToken.setText("");
        txtInputToken.setEnabled(false);
        txtSql.setEnabled(true);
    }//GEN-LAST:event_btnStringActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainProgram().setVisible(true);
            }
        });
    }
    
    public boolean isNumeric(String str)  
    {  
        try  
        {  
          double d = Double.parseDouble(str);  
        }  
        catch(NumberFormatException nfe)  
        {  
          return false;  
        }  
        return true;  
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnParse;
    private javax.swing.JButton btnString;
    private javax.swing.JButton btnToken;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblOutput;
    private javax.swing.JTextField txtInputToken;
    private javax.swing.JTextArea txtSql;
    // End of variables declaration//GEN-END:variables
}
